#use this command every new container(ubuntu server) after creating pod
apt update -y
apt upgrade -y
apt install net-tools -y
apt install tcpdump -y
apt install vim -y
apt install iputils-ping -y

# ubuntu apt update command not working
echo -e "nameserver 8.8.8.8\nnameserver 8.8.4.4" | tee -a /etc/resolv.conf
# Build a Docker image and tag it for Docker Hub
docker build -t <dockerhub account id name>/<image name> .
docker build -t razedulalways/kubeload4

# Push the Docker image to Docker Hub
docker push <dockerhub account id name>/<image name>
docker push razedulalways/kubeload4

# Create resources from the service1-rc.yaml file
kubectl create -f service1-rc.yaml


# List all pods in the current namespace
kubectl get pods

# Open an interactive shell in a running pod
kubectl exec -it <pod name> /bin/bash

# Open an interactive shell in a running container into pod
kubectl exec -it <pod name> -c <service name/container name> -- /bin/sh

# List all services in the default namespace
kubectl get svc

# describe service
 kubectl describe service <service name>

# get service enpoint to check configuration
 kubectl get endpoints <service name>
# Get details of a specific service named server1-service
kubectl get svc server1-service

# Get endpoint information for services
kubectl get ep

# List all pods with additional details like IP and node info
kubectl get pods -o wide

# Get node IP and other details (note the typo: "nnode" should be "nodes")
kubectl get nodes -o wide

# Delete a specific pod by its name
kubectl delete pod <pod name>

# Get all services in the default namespace (run on your local machine)
kubectl get svc -n default

# Test service connectivity via HTTP using curl
curl http://server1-service:80

# Forward a local port to a port on a Kubernetes service for testing
kubectl port-forward svc/server1-service 8080:80

# Set a specific nodePort for external access to a service
nodePort: 30002 

# Get the YAML configuration for a specific service
kubectl get svc server1-service -o yaml

# Describe a specific service to see detailed information
kubectl describe svc <service-name>

# Capture and analyze network traffic on port 80 with tcpdump
tcpdump -i any port 80 -vv

# Check logs for a specific pod
kubectl logs <pod name>
kubectl logs <pod name> -f

# View resource usage (CPU/Memory) in a namespace
kubectl top pod -n <namespace>

# Get logs from a specific container in a pod
kubectl logs <pod-name> -c <container-name>

# Describe a node to get detailed information (useful for debugging)
kubectl describe node <node-name>

# Run a command in a new pod (useful for testing/debugging)
kubectl run -i --tty --rm debug --image=busybox -- sh

# Delete a pod by name (same as earlier, but worth repeating)
kubectl delete pod <pod-name>

# Delete all pods in a namespace
kubectl delete pods --all -n <namespace>

# Check the status of all pods, even those in a failed or completed state
kubectl get pods --all-namespaces -o wide

# Create a deployment from a YAML file
kubectl apply -f deployment.yaml

# Scale a deployment to a specific number of replicas
kubectl scale deployment <deployment-name> --replicas=<number-of-replicas>

# Get detailed information about a deployment
kubectl describe deployment <deployment-name>

# List all namespaces in the cluster
kubectl get namespaces

# Create a new namespace
kubectl create namespace <namespace-name>

# Switch to a different namespace
kubectl config set-context --current --namespace=<namespace-name>

# get all namespace

kubectl get pods --all-namespaces

